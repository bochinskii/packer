
---------------------------------------------

Создание Vagrant box (LAMP) с помощью packer (Live Server)

----------------------------------------------

Займемся созданием vagrantbox. Будем использовать все тот же Ubuntu-22.04-live-server.


$ mkdir ./003_Create_vagrantbox_LAMP && cd ./003_Create_vagrantbox_LAMP

$ mkdir ./{legacy,liveserver}

$ cd liveserver


$ mkdir ./files

$ echo "<h1>This is test page</h1>" > files/index.html

$ echo "<?php phpinfo(); ?>" > files/info.php




Настраивать операционную систему будем с помощью ansible.

https://www.packer.io/plugins/provisioners/ansible/ansible

$ mkdir ./provisioning

Создадим файл - playbook.yml. С ним можно ознакомится в директории с проектом.




Для работы vagrantbox нужно поместить публичный ключ для vagrant пользователя.
Мы этот ключ доставим в опреционную систему с помощью data-user файла (позже увидим)

$ mkdir ./keys

$ curl -k https://raw.githubusercontent.com/hashicorp/vagrant/main/keys/vagrant.pub -o ./keys/vagrant.pub





Так же создадим user-data файл

$ mkdir ./http

С ним можно ознакомиться в диреткории с проектом.

Тут, важное изменение - # Add public key.Так же блок - # General vagrant settings.
Тут дополнительно описывать ничего не надо и так понятно.




Ну, теперь наш paker файл

Создадим папку в которую мы поместим наш box файл.

$ mkdir ./builds

С файлом - lamp.pkr.hcl, так же можно ознакомиться в диреткории с проектом

Тут мы решили использовать переменные. Ну и добавился блок - provisioner, в качестве
которого выступает ansible.

https://www.packer.io/guides/hcl/variables

Так же блок - post-processor. Это как раз и есть vagrant процессор, который создает box файл.






Все, запускаем.

# packer build lamp.pkr.hcl

virtualbox-iso.ubu_lamp: output will be in this color.

...



По поводу ansible. Тут можно заметить, что мы написали только playbook и все. Не указывали inventory файл. Дело в том, что тут этого не нужно.
Packer делает это автоматически. В выводе вы можете заметить вот такие строчки

...
ansible-playbook -e packer_build_name="ubu_lamp" -e packer_builder_type=virtualbox-iso -e packer_http_addr=10.0.2.2:8395 --ssh-extra-args '-oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedKeyTypes=+ssh-rsa' -vv -e ansible_ssh_private_key_file=/tmp/ansible-key1110358287 -i /tmp/packer-provisioner-ansible3971725945 /home/*****box/provisioning/playbook.yml
...

Вот поэтому кроме как playbook нам ничего и не нужно.


---------------------------------------------------------------------------------------
ЗАМЕТКА:

Тут есть некоторый нюанс. В новых версиях packer разработчики "выпилили" rsa, поэтому
мы добавили вот эту строку

ansible_ssh_extra_args = ["-oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedKeyTypes=+ssh-rsa"]

мы просто передали опции в ssh

второй вариант - это сгенерировать другой ключ на основе ECDSA. Публичный ключ
поместить в образ с помощью user-data (как мы и делаем с vagrant публичным ключем).
А ansible'у указать сгенерированный ключ.

$ ssh-keygen -t ecdsa -b 256 -f ./keys/ecdsa

Вот пример

provisioner "ansible" {
  playbook_file = "./provisioning/playbook.yml"
  ssh_host_key_file = "./keys/ecdsa"
  ssh_authorized_key_file = "./keys/ecdsa.pub"
  ansible_env_vars = ["ANSIBLE_HOST_KEY_CHECKING=False"]
  extra_arguments = ["-e ansible_ssh_private_key_file=/home/denisb/WORK/packer/003_Create_vagrantbox/keys/ecdsa"]
}

Можете протестировать любой вариант

------------------------------------------------------------------------------------





Далее можно протестировать box файл.

$ vagrant box add ./builds/virtualbox-ubuntu2204.box --name lamp-ubuntu

==> box: Box file was not detected as metadata. Adding it directly...
==> box: Adding box 'lamp-ubuntu' (v0) for provider:
    box: Unpacking necessary files from: file:///packer/lamp/builds/virtualbox-ubuntu2204.box
==> box: Successfully added box 'lamp-ubuntu' (v0) for 'virtualbox'!


Подготовим легенький Vagrantfile. С ним можно ознакомиться в диреткории с проектом.


Запускаем vagrant.

$ vagrant up

Bringing machine 'default' up with 'virtualbox' provider...
==> default: Importing base box 'lamp-ubuntu'...
==> default: Matching MAC address for NAT networking...
==> default: Setting the name of the VM: my_vm
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==> default: Forwarding ports...
    default: 80 (guest) => 8080 (host) (adapter 1)
    default: 22 (guest) => 2222 (host) (adapter 1)
==> default: Running 'pre-boot' VM customizations...
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default:
    default: Vagrant insecure key detected. Vagrant will automatically replace
    default: this with a newly generated keypair for better security.
    default:
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if it's present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==> default: Machine booted and ready!
==> default: Checking for guest additions in VM...
    default: The guest additions on this VM do not match the installed version of
    default: VirtualBox! In most cases this is fine, but in rare cases it can
    default: prevent things such as shared folders from working properly. If you see
    default: shared folder errors, please make sure the guest additions within the
    default: virtual machine match the version of VirtualBox you have installed on
    default: your host and reload your VM.
    default:
    default: Guest Additions Version: 6.0.0 r127566
    default: VirtualBox Version: 6.1
==> default: Mounting shared folders...
    default: /vagrant => *



$ curl -I 127.0.0.1:8080
HTTP/1.1 200 OK
Date: Sun, 05 Jun 2022 08:48:35 GMT
Server: Apache/2.4.52 (Ubuntu)
Last-Modified: Sun, 05 Jun 2022 08:13:07 GMT
ETag: "1b-5e0aeeceef591"
Accept-Ranges: bytes
Content-Length: 27
Content-Type: text/html


$ curl -I 127.0.0.1:8080/info.php
HTTP/1.1 200 OK
Date: Sun, 05 Jun 2022 08:49:09 GMT
Server: Apache/2.4.52 (Ubuntu)
Content-Type: text/html; charset=UTF-8


Не забываем очищать после тестирования

$ vagrant destroy

$ vagrant box remove lamp-ubuntu

-------------

БОНУС.

-------------

Не всегда хорошо пароль и имя пользователя указывать в packer файле (как у нас).
Для этих целей используются enviroment переменные.

Вот пример

# export V_SSH_USERNAME=vagrant && export V_SSH_PASSWORD=vagrant

# env | grep V_
V_SSH_PASSWORD=vagrant
V_SSH_USERNAME=vagrant

nano lamp.pkr.hcl

*************************

variables {
   v_ssh_username = "${env("V_SSH_USERNAME")}"
   v_ssh_password = "${env("V_SSH_PASSWORD")}"
}

source "virtualbox-iso" "ubu_lamp" {
  ssh_username = "${var.v_ssh_username}"
  ssh_password = "${var.v_ssh_password}"
}

*************************

Кстати, проверить видил ли packer переменные можно таким образом (удобно для troubleshooting)

# packer console lamp.pkr.hcl
> variables
> > input-variables:

var.v_iso_checksum: "sha256:f8e3086f3cea0fb3fefb29937ab5ed9d19e767079633960ccb50e76153effc98"
var.v_iso_url: "http://releases.ubuntu.com/20.04.3/ubuntu-20.04.3-live-server-amd64.iso"
var.v_ssh_password: "vagrant"
var.v_ssh_username: "vagrant"




---------------------------------------------

Создание Vagrant box с помощью packer (Legacy Server)

----------------------------------------------

$ cd ./legacy

На само деле тут мало что можно описать нового. Так что чуток пробежимся.


В директории с проектом вы можете ознакомиться с файлом - lamp_legacy.pkr.hcl

Тут с помощью provision file мы копируем публичный ключ в tmp директорию виртуальной
машины (только таким образом оно работает), а далее с помощью shell данный ключ направляем
в папку пользователя vagrant. Ну, все остальное делается с помощью playbook.




Так же не забываем посмотреть файл - preseed.cfg

Тут, коснулись изменения в # Package selection.
Мы дополнительно поставили все необходимое для vagrant box
(cryptsetup build-essential libssl-dev libreadline-dev zlib1g-dev linux-source dkms nfs-common).

Так же появились дополнительные настройки для vagrant пользователя - # Vagrant Settings.
